README.md:
<code>
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/pages/api-reference/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.js`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.js`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn-pages-router) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/pages/building-your-application/deploying) for more details.

</code>

jsconfig.json:
<code>
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

</code>

package.json:
<code>
{
  "name": "backend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "next": "15.1.0"
  }
}

</code>

pages/_app.js:
<code>
import "@/styles/globals.css";

export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

</code>

pages/_document.js:
<code>
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

</code>

pages/index.js:
<code>
import Head from "next/head";
import Image from "next/image";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <main className={styles.main}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js logo"
            width={180}
            height={38}
            priority
          />
          <ol>
            <li>
              Get started by editing <code>pages/index.js</code>.
            </li>
            <li>Save and see your changes instantly.</li>
          </ol>

          <div className={styles.ctas}>
            <a
              className={styles.primary}
              href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Image
                className={styles.logo}
                src="/vercel.svg"
                alt="Vercel logomark"
                width={20}
                height={20}
              />
              Deploy now
            </a>
            <a
              href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
              className={styles.secondary}
            >
              Read our docs
            </a>
          </div>
        </main>
        <footer className={styles.footer}>
          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              aria-hidden
              src="/file.svg"
              alt="File icon"
              width={16}
              height={16}
            />
            Learn
          </a>
          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              aria-hidden
              src="/window.svg"
              alt="Window icon"
              width={16}
              height={16}
            />
            Examples
          </a>
          <a
            href="https://nextjs.org?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              aria-hidden
              src="/globe.svg"
              alt="Globe icon"
              width={16}
              height={16}
            />
            Go to nextjs.org â†’
          </a>
        </footer>
      </div>
    </>
  );
}

</code>

pages/api/hello.js:
<code>
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: "John Doe" });
}

</code>

pages/api/process_final.js:
<code>
// // import { spawn } from "child_process";
// // import path from "path";
// // import { promises as fs } from "fs";

// // export const config = {
// //   api: {
// //     bodyParser: {
// //       sizeLimit: "50mb",
// //     },
// //   },
// // };

// // export default async function handler(req, res) {
// //   if (req.method !== "POST") {
// //     return res.status(405).json({ error: "Method not allowed" });
// //   }

// //   const { image, sensitivity = 50 } = req.body;

// //   const imagesDir = path.join(process.cwd(), "public", "images");
// //   await fs.mkdir(imagesDir, { recursive: true });

// //   const pyScript = path.join(process.cwd(), "scripts", "process_final.py");

// //   const py = spawn("python3", [pyScript], { stdio: ["pipe", "pipe", "pipe"] });

// //   let stdout = "";
// //   let stderr = "";

// //   py.stdout.on("data", (data) => {
// //     stdout += data.toString();
// //   });

// //   py.stderr.on("data", (data) => {
// //     stderr += data.toString();
// //   });

// //   py.on("close", (code) => {
// //     if (code !== 0) {
// //       return res.status(500).json({ error: stderr });
// //     }
// //     try {
// //       const result = JSON.parse(stdout);
// //       res.status(200).json(result);
// //     } catch (e) {
// //       res.status(500).json({ error: "Invalid Python output" });
// //     }
// //   });

// //   py.stdin.write(JSON.stringify({ image, sensitivity, output_dir: imagesDir }));
// //   py.stdin.end();
// // }
// // // 

// import { spawn } from "child_process";
// import path from "path";
// import { promises as fs } from "fs";

// export const config = {
//   api: {
//     bodyParser: {
//       sizeLimit: "50mb",
//     },
//   },
// };

// export default async function handler(req, res) {
//   if (req.method !== "POST") {
//     return res.status(405).json({ error: "Method not allowed" });
//   }

//   const { image, sensitivity = 50 } = req.body;

//   const imagesDir = path.join(process.cwd(), "public", "images");
//   await fs.mkdir(imagesDir, { recursive: true });

//   const pyScript = path.join(process.cwd(), "scripts", "process_final.py");

//   const py = spawn("python3", [pyScript], { stdio: ["pipe", "pipe", "pipe"] });

//   let stdout = "";
//   let stderr = "";

//   py.stdout.on("data", (data) => {
//     stdout += data.toString();
//   });

//   py.stderr.on("data", (data) => {
//     stderr += data.toString();
//   });

//   py.on("close", (code) => {
//     if (code !== 0) {
//       return res.status(500).json({ error: stderr });
//     }
//     try {
//       const result = JSON.parse(stdout);
//       res.status(200).json(result);
//     } catch (e) {
//       res.status(500).json({ error: "Invalid Python output" });
//     }
//   });

//   py.stdin.write(JSON.stringify({ image, sensitivity, output_dir: imagesDir }));
//   py.stdin.end();
// }


import { spawn } from "child_process";

export default function handler(req, res) {
  if (req.method === "POST") {
    const { edgesPath } = req.body;

    const process = spawn("python3", [
      "./scripts/process_final.py",
      edgesPath,
    ]);

    let result = "";
    process.stdout.on("data", (data) => {
      result += data.toString();
    });

    process.on("close", () => {
      const output = JSON.parse(result);
      res.status(200).json(output);
    });
  } else {
    res.status(405).json({ message: "Method Not Allowed" });
  }
}

</code>

pages/api/process_image.js:
<code>
import Cors from "cors";
import fs from "fs";
import path from "path";
import { spawn } from "child_process";

// Initialize CORS
const cors = Cors({
  origin: "*",
  methods: ["POST"],
});

// Run middleware
function runMiddleware(req, res, fn) {
  return new Promise((resolve, reject) => {
    fn(req, res, (result) => {
      if (result instanceof Error) return reject(result);
      return resolve(result);
    });
  });
}

export default async function handler(req, res) {
  await runMiddleware(req, res, cors);

  if (req.method === "POST") {
    const { image, sensitivity } = req.body;

    console.log("Received image and sensitivity:", sensitivity);

    try {
      // Decode Base64 image
      const buffer = Buffer.from(image.replace(/^data:image\/\w+;base64,/, ""), "base64");

      // Create output directory
      const outputDir = path.resolve("./public/images");
      if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

      // Define file paths
      const originalPath = path.join(outputDir, "original.png");
      const adjustedPath = path.join(outputDir, "adjusted.png");
      const svgPath = path.join(outputDir, "adjusted.svg");
      const gcodePath = path.join(outputDir, "output.ncc");

      // Save original image
      fs.writeFileSync(originalPath, buffer);
      console.log("Original image saved at:", originalPath);

      // Run Python script
      const pythonProcess = spawn("python3", [
        "./scripts/process_image.py",
        originalPath,
        adjustedPath,
        svgPath,
        gcodePath,  // Ensure this is passed correctly
        sensitivity.toString(),
    ]);
    

      let pythonStdout = "";
      let pythonStderr = "";

      pythonProcess.stdout.on("data", (data) => {
        console.log(`Python stdout: ${data}`);
        pythonStdout += data;
      });

      pythonProcess.stderr.on("data", (data) => {
        console.error(`Python stderr: ${data}`);
        pythonStderr += data;
      });

      pythonProcess.on("close", (code) => {
        if (code !== 0) {
          console.error("Python script failed:", pythonStderr);
          return res.status(500).json({
            message: "Image processing pipeline failed.",
            error: pythonStderr,
          });
        }

        console.log("Image processing pipeline completed successfully.");
        res.status(200).json({
          message: "Image, SVG, and GCode files saved successfully!",
          original: "/images/original.png",
          adjusted: "/images/adjusted.png",
          svg: "/images/adjusted.svg",
          gcode: "/images/output.ncc",
        });
      });
    } catch (error) {
      console.error("Error processing image:", error);
      res.status(500).json({
        message: "An error occurred while processing the image.",
        error: error.toString(),
      });
    }
  } else {
    res.status(405).json({ message: "Method not allowed" });
  }
}

</code>

styles/globals.css:
<code>
:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

</code>

styles/Home.module.css:
<code>
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 180px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}

</code>

scripts/process_image.py:
<code>
import cv2
import sys
import os
import potrace
import numpy as np

def process_image(input_path, adjusted_path, svg_path, gcode_path, sensitivity):
    try:
        print(f"Processing image: {input_path} with sensitivity: {sensitivity}")

        # Step 1: Edge Detection
        img = cv2.imread(input_path, cv2.IMREAD_GRAYSCALE)
        if img is None:
            print("Error: Could not load the input image.")
            sys.exit(1)

        # Edge detection with Canny
        edges = cv2.Canny(img, int(sensitivity), int(sensitivity) * 2)

        # Explicitly binarize the image (ensure values are 0 or 1)
        binary_image = (edges > 0).astype(np.uint8)  # Convert to 0 and 1
        cv2.imwrite(adjusted_path, binary_image * 255)  # Save for visualization (0 and 255)

        print(f"Edge-detected image saved to: {adjusted_path}")

        # Step 2: Convert to SVG using Potrace
        print("Converting edge-detected image to SVG...")
        height, width = binary_image.shape
        bitmap = potrace.Bitmap(binary_image)  # Binary bitmap passed here

        # Trace the bitmap
        path = bitmap.trace()

        # Write the SVG file
        with open(svg_path, "w") as svg_file:
            svg_file.write(f"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 {width} {height}'>\n")
            for curve in path:
                start_x, start_y = curve.start_point  # Unpack tuple
                d = f"M {start_x} {start_y} "  # Start the path

                for segment in curve.segments:
                    if segment.is_corner:
                        # Access corner points
                        corner_x, corner_y = segment.c
                        d += f"L {corner_x} {corner_y} "
                    else:
                        # Access control points for curves
                        control_x1, control_y1 = segment.c1
                        control_x2, control_y2 = segment.c2
                        d += f"Q {control_x1} {control_y1} {control_x2} {control_y2} "
                d += "Z"  # Close the path
                svg_file.write(f"<path d='{d}' stroke='black' fill='none'/>\n")
            svg_file.write("</svg>")
        print(f"SVG file saved to: {svg_path}")

        # Step 3: Convert SVG to GCode (.ncc file)
        print("Converting SVG to GCode...")
        with open(gcode_path, "w") as gcode_file:
            gcode_file.write("(Sample GCode generated from SVG)\n")
            gcode_file.write("G21 (Set units to millimeters)\n")
            gcode_file.write("G90 (Absolute positioning)\n")
            gcode_file.write("G28 (Go to home position)\n")
            gcode_file.write("(Start Drawing Path)\n")
            gcode_file.write("G1 X0 Y0 F1500 (Move to start)\n")
            gcode_file.write("(End of GCode)\n")
        print(f"GCode file saved to: {gcode_path}")

    except Exception as e:
        print(f"Error during processing: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 6:
        print("Usage: python3 process_image.py <input_path> <adjusted_path> <svg_path> <gcode_path> <sensitivity>")
        sys.exit(1)

    input_path = sys.argv[1]
    adjusted_path = sys.argv[2]
    svg_path = sys.argv[3]
    gcode_path = sys.argv[4]
    sensitivity = sys.argv[5]

    process_image(input_path, adjusted_path, svg_path, gcode_path, sensitivity)

</code>

scripts/process_final.py:
<code>
import cv2
import sys
import os

def process_image(input_path, output_path, sensitivity):
    try:
        print("Starting image processing...")
        
        # Debugging: Ensure input file exists
        if not os.path.exists(input_path):
            print(f"Error: Input file '{input_path}' does not exist.")
            sys.exit(1)

        print(f"Reading image from: {input_path}")
        image = cv2.imread(input_path, cv2.IMREAD_COLOR)
        if image is None:
            print("Error: Failed to load the image. File may be corrupted or invalid.")
            sys.exit(1)

        print("Converting to grayscale...")
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        print(f"Applying edge detection with sensitivity: {sensitivity}")
        edges = cv2.Canny(gray, int(sensitivity), int(sensitivity) * 2)

        print(f"Saving processed image to: {output_path}")
        cv2.imwrite(output_path, edges)
        print("Image processing complete.")
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    print("Script started with arguments:", sys.argv)
    
    if len(sys.argv) != 4:
        print("Usage: python3 process_final.py <input_path> <output_path> <sensitivity>")
        sys.exit(1)

    input_path = sys.argv[1]
    output_path = sys.argv[2]
    sensitivity = sys.argv[3]

    process_image(input_path, output_path, sensitivity)

</code>

